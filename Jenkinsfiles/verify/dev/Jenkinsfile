pipeline {
  agent any
  options { disableConcurrentBuilds() }
  parameters { string(name: 'BASELINE_SHA', defaultValue: '', description: 'GitOps commit SHA to verify (dev).') }
  environment { GITOPS_REPO = 'https://github.com/daoquocquyen/pingpong-gitops-config.git' }
  stages {
    stage('Validate input') { steps { script { if (!(params.BASELINE_SHA ?: '')) { echo 'Missing BASELINE_SHA'; currentBuild.result = 'NOT_BUILT' } } } }
    stage('Checkout baseline') {
      when { expression { return currentBuild.result == null } }
      steps {
        dir('gitops') {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[ url: env.GITOPS_REPO ]]])
          sh '''
            set -eu
            if ! git cat-file -e "$BASELINE_SHA" 2>/dev/null; then
              git fetch origin "$BASELINE_SHA":"refs/tmp/baseline" --quiet || true
            fi
            git checkout "$BASELINE_SHA"
          '''
        }
      }
    }
    stage('Record baseline') {
      when { expression { return currentBuild.result == null } }
      steps { script { writeFile file: 'baseline.txt', text: params.BASELINE_SHA + "\n"; def d=currentBuild.description?:''; currentBuild.description=(d?d+' | ':'')+"baseline=${params.BASELINE_SHA}, env=dev"; archiveArtifacts artifacts: 'baseline.txt', fingerprint: true, onlyIfSuccessful: false } }
    }
    stage('Argo CD wait for sync/health') {
      when { expression { return currentBuild.result == null } }
      steps { sh '''
        argocd app wait pingpong-dev --sync --health --timeout 300 --server host.docker.internal:8443 --insecure --grpc-web
        argocd app get  pingpong-dev --server host.docker.internal:8443 --insecure --grpc-web
      ''' }
    }
    stage('Dev smoke checks') {
      when { expression { return currentBuild.result == null } }
      steps { sh '''
        set -eu
        curl -sSf -H "Host: ping.dev.local" http://host.docker.internal:8888/health | tee dev-health.json
        grep -q 'UP' dev-health.json
        curl -sSf -H "Host: ping.dev.local" http://host.docker.internal:8888/api/ping | tee dev-ping.txt
        grep -q 'pong-dev' dev-ping.txt
      ''' }
    }
  }
  post {
    success {
      echo '[DEV] Sending notification to dev-team: SUCCESS'
    }
    failure {
      echo '[DEV] Sending notification to dev-team: FAILURE'
    }
    unstable {
      echo '[DEV] Sending notification to dev-team: UNSTABLE'
    }
  }
}

