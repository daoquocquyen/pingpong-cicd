pipeline {
  agent any
  options { disableConcurrentBuilds() }

  parameters { string(name: 'BASELINE_SHA', defaultValue: '', description: 'GitOps commit SHA to verify (qa).') }
  environment { GITOPS_REPO = 'https://github.com/daoquocquyen/pingpong-gitops-config.git' }

  stages {
    stage('Validate input') {
      steps {
        script {
          if (!(params.BASELINE_SHA ?: '')) { echo 'Missing BASELINE_SHA'; currentBuild.result = 'NOT_BUILT' }
        }
      }
    }

    stage('Checkout baseline') {
      when { expression { return currentBuild.result == null } }
      steps {
        dir('gitops') {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[ url: env.GITOPS_REPO ]]])
          sh '''
            set -eu
            if ! git cat-file -e "$BASELINE_SHA" 2>/dev/null; then
              git fetch origin "$BASELINE_SHA":"refs/tmp/baseline" --quiet || true
            fi
            git checkout "$BASELINE_SHA"
          '''
        }
      }
    }

    stage('Record baseline') {
      when { expression { return currentBuild.result == null } }
      steps {
        script {
          writeFile file: 'baseline.txt', text: params.BASELINE_SHA + "\n"
          def desc = currentBuild.description ?: ''
          currentBuild.description = (desc ? desc + ' | ' : '') + "baseline=${params.BASELINE_SHA}, env=qa"
          archiveArtifacts artifacts: 'baseline.txt', fingerprint: true, onlyIfSuccessful: false
        }
      }
    }

    stage('Argo CD wait for sync/health') {
      when { expression { return currentBuild.result == null } }
      steps {
        sh '''
          argocd app wait pingpong-qa --sync --health --timeout 300 --server host.docker.internal:8443 --insecure --grpc-web
          argocd app get  pingpong-qa --server host.docker.internal:8443 --insecure --grpc-web
        '''
      }
    }

    stage('QA integration checks') {
      when { expression { return currentBuild.result == null } }
      steps {
        sh '''
          set -eu
          curl -sSf -H "Host: ping.qa.local" http://host.docker.internal:8888/health | tee qa-health.json
          grep -q 'UP' qa-health.json
          for i in 1 2 3; do
            curl -sSf -H "Host: ping.qa.local" http://host.docker.internal:8888/api/ping | tee qa-ping-$i.txt
            grep -q 'pong-qa' qa-ping-$i.txt
          done
        '''
      }
    }
  }

  post {
    success {
      echo '[QA] Sending notification to qa-team: SUCCESS'
    }
    failure {
      echo '[QA] Sending notification to qa-team: FAILURE'
    }
    unstable {
      echo '[QA] Sending notification to qa-team: UNSTABLE'
    }
  }
}

